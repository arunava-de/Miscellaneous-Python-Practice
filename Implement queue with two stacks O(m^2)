class Stack(object):

    def __init__(self):
        """Initialize an empty stack"""
        self.items = []

    def push(self, item):
        """Push a new item onto the stack"""
        self.items.append(item)

    def pop(self):
        """Remove and return the last item"""
        # If the stack is empty, return None
        # (it would also be reasonable to throw an exception)
        if self.isempty():
            return None

        return self.items.pop()
    
    def isempty(self):
        if self.items == []:
            return True
        else:
            return False

class QueueTwoStacks(object):

    # Implement the enqueue and dequeue methods
    def __init__(self):
        self.stack1 = Stack()
        self.stack2 = Stack()

    def enqueue(self, item):
        self.stack1.push(item)

    def dequeue(self):
        if self.stack1.isempty() and self.stack2.isempty():
            raise ValueError()
        elif self.stack1.isempty() and not self.stack2.isempty():
            return self.stack2.pop()
        else:
            #Reversing order and popping
            while not self.stack1.isempty():
                out = self.stack1.pop()
                self.stack2.push(out)
            res = self.stack2.pop()
            #Pushing contents back into 1st stack
            while not self.stack2.isempty():
                out = self.stack2.pop()
                self.stack1.push(out)
            return res
