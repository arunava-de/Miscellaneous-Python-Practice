class BinaryTreeNode(object):

        def __init__(self, value):
            self.value = value
            self.left = None
            self.right = None

        def insert_left(self, value):
            self.left = Test.BinaryTreeNode(value)
            return self.left

        def insert_right(self, value):
            self.right = Test.BinaryTreeNode(value)
            return self.right

def is_balanced(tree_root):

    # Determine if the tree is superbalanced
    if tree_root == None:
        return True
    
    depths = []
    nodes = []
    nodes.append((tree_root,0))
    
    while len(nodes):
        node, depth = nodes.pop()
        
        if node.left == None and node.right == None:
            if depth not in depths:
                depths.append(depth)
                
                maxd = max(depths)
                mind = min(depths)
                
                if len(depths)>2:
                    return False
                elif len(depths)==2 and abs(depths[1]-depths[0])>1:
                    return False
        
        else:
            if node.left!=None:
                nodes.append((node.left, depth+1))
            if node.right!=None:
                nodes.append((node.right, depth+1))
        
    return True
