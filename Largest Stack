class Stack(object):

    def __init__(self):
        """Initialize an empty stack"""
        self.items = []

    def push(self, item):
        """Push a new item onto the stack"""
        self.items.append(item)

    def pop(self):
        """Remove and return the last item"""
        # If the stack is empty, return None
        # (it would also be reasonable to throw an exception)
        if not self.items:
            return None

        return self.items.pop()

    def peek(self):
        """Return the last item without removing it"""
        if not self.items:
            return None
        return self.items[-1]


class MaxStack(object):

    # Implement the push, pop, and get_max methods


    def __init__(self):
        self.items = []
        self.maxx = Stack()

    def push(self, item):
        M = self.maxx.peek()
        if M==None or item>=M:
            self.maxx.push(item)
            
        self.items.append(item)

    def pop(self):
        old = self.items.pop()
        if old == self.maxx.peek():
            self.maxx.pop()
        return old

    def get_max(self):
        return self.maxx.peek()
