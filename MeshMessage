from collections import deque

def get_path(graph, start_node, end_node):
    Q = deque()
    Q.append(start_node)
    parent = {}

    if start_node not in graph.keys() or end_node not in graph.keys():
        raise ValueError("Invalid node")
    elif start_node==end_node:
        return [start_node]
        
    while len(Q)>0:
        
        curr = Q.popleft()
        
        if curr==end_node:
            break
        
        for neighbor in graph[curr]:
            if neighbor not in parent.keys():
                Q.append(neighbor)
                parent[neighbor] = curr
                
    if curr!=end_node:
        return None
        
    path = [end_node]
    v = end_node
    
    while parent[v]!=start_node:
        path.append(parent[v])
        v = parent[v]
    path.append(start_node)
    path.reverse()
    
    return path

